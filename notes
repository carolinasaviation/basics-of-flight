I love the level of depth you want to go into and am happy to be pushing into that direction. With the current budget we will not be
able to reach all of these. There are a number of technical constraints and hurdles to jump through that make it difficult to
say up front that we will be able to do X, Y, and Z. I propose that we continue down the path of designing the macdaddy of all displays,
and development will follow an interative pattern behind it were we will first identify the baseline minimum product needed to launch.

Once we get to this point, we will have something launchable and under budget. Then we can start identifying the most desired
interactives to start tackling one at a time. With these constraints each additional feature will be able to be estimated in a
much more tight manner and we're making iterative improvement. Katie's donors will be able to see the product in their hands at
a very early state and see the value of their investment early. There is a lot of flexibility for Katie with this approach with
her budgeting constraints and I believe it will give her a very powerful tool in selling it to her director and donors.

The first few interactives will be the most time consuming and unknown as we explore the technical constraints and as I learn
more about flight and how to program these things.

The level of detail in the wireframes and notes were superb. Seriously some of the best wireframes I've ever worked with. I
spent some time this weekend starting a prototype based on these wireframes to get something usable and viewable as quickly
as possible (part of the iterative development workflow I mentioned above). Early this week I will have a link (most likely
http://carolinasaviation.github.io/basics-of-flight/) up to see my work in progress (and it will be kept updated most every
time that I work on it).

The first couple technical hurdles are:

* How will we do page management and lifecycle for a single page static webapp?
* What is the best way to control both static and interactive animations for this project?

The first question is fairly straightforward and I have a really good handle already implemented on that front. The second
question is much more challenging and interesting. I did three really early experiments last night to start getting a handle
on which directions look most promising to explore. Concerning iOS there are some definite performance considerations when
choosing exactly which technologies we'll be combining to build this. iOS7 will definitely change this landscape.

The essay, "Up and Down the Ladder of Abstraction" (http://worrydream.com/LadderOfAbstraction/), by Bret Victor provided a
lot of insight on the types of things to be thinking about while developing this.


Here is the summarization of what I understood the overall direction is from the wireframes as well as some additional notes
and questions.

Three primary sections (forces, controls and preflight).
* Each will have an introduction view and then a handful of more specific views.
* Each of these specific views will have one or more educational components.

General Questions:
* Once a user goes to a section and sees the introduction card: after they
begin interacting with the details are they able to go back to the intro view somehow?
* Since iOS is primarily a touch and gesture based platform, rather than buttons for the interactions I propose
  we do slider controls. E.g. on the adjust weight graphic, simply place your finger on the 400 lbs box and move it
	to the left/right up/down to adjust the weight.
* 3D. This is an area the web has recently gotten the APIs to do natively with something called WebGL. It is not
	possible in iOS today, and there have been no reports of WebGl being enabled in iOS 7 yet. In iOS6 Apple has WebGl
	in the Safari source code, but turned off. In Safari for Mac WebGL is disabled by default. I have no reason to
	believe this will be any different when iOS7 comes out, regardless it's not something we can expect to be technically
	possible in the iPads we will have for the display. I also have *very* little experience with 3D programming, though
	it is an area I am extremely interested in. I recently picked up a couple books on Math for 3D programming and a thorough
	introduction to WebGL in specific.

Forces/Weight questions

* The film+interaction seems like it's describing the same function. Following the flow it
  seems like clicking the plane would do the transition to the third wireframe (cessna elevation)
  with the controls from the fourth wireframe appearing (adjusting the weight)
* There is the possibility to provide another view with all of the controls were the users could
	adjust multiple inputs at the same time (e.g. adjust the weight and the amount of thrust at the
	same time).
* Knowing that the same general view is used for each interactive I intend on programming this in a way
	that manipulating multiple inputs at once should be possible if the UI allows for it.

Oh yes. One last thing I almost forgot (and I haven't looked into it too in-depthly yet either). Fonts on the web
have different licensing agreements than that for print. I have almost 100% certainty that you don't have the web
license on those fonts right now. Not all fonts have a web license available, either. It depends a lot on the foundry.
Some allow you to pay a one-time fee for the license and others are only available through a subscription service.

Alternatively, you could look into comparative fonts with a more permissive license.

* http://www.theleagueofmoveabletype.com/ --> a very small selection of free, high quality open web fonts. (includes one of my absolute favorite fonts League Gothic http://www.theleagueofmoveabletype.com/league-gothic)
* http://www.google.com/fonts/ --> A large selection of free webfonts hosted by Google

Font subscription services (I believe these also show comparable fonts if the desired font is not available)
* https://typekit.com/ (now owned by Adobe)
* http://fontdeck.com/
* http://www.fontspring.com/

Katie, let me know what you think about that approach to development budgeting. I believe it will give you the most
flexibility and control and help mitigate the risks inherent to software development.

Hope you enjoyed this short essay! :)

- Dustan






